{"version":3,"file":"static/js/497.c310ef2d.chunk.js","mappings":"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","sources":["components/Spinner/Spinner.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","views/ContactsView.js"],"sourcesContent":["import styled from '@emotion/styled/macro';\nimport { keyframes } from '@emotion/react';\nimport { CgSpinner } from 'react-icons/cg';\n\nconst spin = keyframes`\n0% {\n  transform: rotate(0deg);\n}\n100% {\n  transform: rotate(1turn);\n}\n`;\n\nexport const Spinner = styled(CgSpinner)`\n  animation: ${spin} 0.85s linear infinite;\n`;\n\nSpinner.defaultProps = {\n  size: 40,\n};","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  max-width: 350px;\n  border: 2px solid rgb(51, 4, 31);\n  border-radius: 10px;\n  padding: 20px;\n  background-color: #e2b3b3;\n`;\n\nexport const Field = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 15px;\n`;\n\nexport const Text = styled.span`\n  margin-bottom: 4px;\n  font-size: 24px;\n  font-weight: 700;\n  color: rgb(88, 11, 34);\n`;\n\nexport const Input = styled.input`\n  margin-top: 4px;\n  height: 30px;\n  padding-left: 10px;\n  font-size: 20px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  box-sizing: border-box;\n  border-radius: 4px;\n  outline: none;\n  transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :focus-within {\n  border: 1px solid rgb(88, 11, 34);\n  }\n`;\n\nexport const Button = styled.button`\n  margin: 0 auto;\n  max-width: 300px;\n  padding-left: 10px;\n  padding-right: 10px;\n  height: 40px;\n  cursor: pointer;\n  background-color: rgb(88, 11, 34);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 10px;\n  border: transparent;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.87;\n  text-align: center;\n  letter-spacing: 0.06em;\n  color: #ffffff;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n  background-color: rgb(51, 4, 31);\n  }\n`;","import { useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useCreateContactMutation, useFetchContactsQuery} from 'redux/contactsAPI';\nimport { Spinner } from 'components/Spinner';\nimport { Form, Field, Text, Input, Button } from './ContactForm.styled';\n\nexport const ContactForm = () => { \n    const [addNewContact, { isLoading }] = useCreateContactMutation();\n    const { data: contacts } = useFetchContactsQuery();  \n\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleNameChange = e => {\n        setName(e.target.value);\n    };\n\n    const handleNumberChange = e => {\n        setNumber(e.target.value);\n    };\n\n    const formReset = () => {\n        setName('');\n        setNumber(''); \n    }\n    \n    const addContact = (name, number) => {\n        const normalizedName = name.toLowerCase();\n\n        if (contacts && contacts.find(contact =>\n            contact.name.toLowerCase() === normalizedName)) {\n            toast.error(`${name} is already in contacts`);\n            return;\n        };     \n        \n        toast.success('Contact added!');\n            \n        return addNewContact({ name, number });\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();       \n        addContact(name, number);       \n        formReset();              \n    }\n    \n    return (\n        <Form onSubmit={handleSubmit} autoComplete=\"off\">\n            <Field>\n                <Text>Name</Text>\n                <Input\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    onChange={handleNameChange}                    \n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n            </Field>\n            <Field>\n                <Text>Number</Text>\n                <Input\n                    type=\"tel\"\n                    name=\"number\"\n                    value={number}\n                    onChange={handleNumberChange}                    \n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                />\n            </Field>\n            <Button type=\"submit\">\n                {isLoading ? <Spinner size=\"36\"/> : 'Add contact'}\n            </Button>\n        </Form>\n    )    \n}","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  margin-left: 15px;\n  cursor: pointer;\n  background-color: rgb(184, 162, 174);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border: transparent;\n  border-radius: 4px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n    background-color: rgb(119, 111, 116);\n  }\n`;","import PropTypes from 'prop-types';\nimport { useDeleteContactMutation} from 'redux/contactsAPI';\nimport { Button } from './ContactItem.styled';\nimport { Spinner } from 'components/Spinner';\n\n\nexport const ContactItem = ({ id, name, phone }) => {   \n    const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n    return (\n        <div>\n            {name}:  {phone}     \n            <Button\n                type=\"button\"\n                onClick={() => deleteContact(id) }\n                disabled={isDeleting}               \n            >\n                {isDeleting && <Spinner size={12} />}                \n            Delete\n            </Button>\n        </div>);\n};\n\nContactItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired   \n}","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding-left: 0px;\n`;\n\nexport const Item = styled.li`\n  margin-bottom: 8px;\n  font-size: 20px;\n  color: #252525;\n`;","import { useFetchContactsQuery} from 'redux/contactsAPI';\nimport { ContactItem } from 'components/ContactItem';\nimport { Spinner } from 'components/Spinner';\nimport { List, Item } from './ContactList.styled';\n\nexport const ContactList = ({ contacts }) => {  \n    const { isFetching } = useFetchContactsQuery();  \n    \n    return (\n        <List>\n            {isFetching && <Spinner />}\n            {(contacts?.length > 0) ? (contacts.map(contact => (\n                <Item key={contact.id}>\n                    <ContactItem {...contact}/>                    \n                </Item>\n            ))) : (<p>Contact list is empty</p>)}\n        </List>\n    )       \n}","import styled from '@emotion/styled';\n\nexport const Field = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 15px;\n`;\n\nexport const Text = styled.span`\n  margin-bottom: 4px;\n  font-size: 20px;\n  color: #212121;\n`;\n\nexport const Input = styled.input`\n  margin-top: 4px;\n  width: 250px;\n  height: 30px;\n  padding-left: 10px;\n  font-size: 18px;\n  border: 1px solid rgba(33, 33, 33, 0.384);\n  box-sizing: border-box;\n  border-radius: 4px;\n  outline: none;\n  transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :focus-within {\n    border: 1px solid rgb(88, 11, 34);\n  }\n`;","import PropTypes from 'prop-types';\nimport { Field, Text, Input } from './Filter.styled';\n\nexport const Filter = ({ filter, onChange }) => {    \n\n    return (\n        <Field>\n            <Text>Find contacts by name</Text>\n            <Input\n                type=\"text\"                \n                value={filter}\n                onChange={onChange}                \n            />\n        </Field>\n    );\n};\n\nFilter.propTypes = {\n    filter: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};","import { useSelector, useDispatch } from 'react-redux';\nimport { Toaster } from 'react-hot-toast';\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { getFilter, filterContact } from 'redux/filterSlice';\nimport { useFetchContactsQuery} from 'redux/contactsAPI';\n\nexport default function ContactsView() {\n  const { data: contacts } = useFetchContactsQuery(); \n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    \n    if (contacts) {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter))\n    };\n\n    return;    \n  };\n\n  const changeFilter = e => {\n    dispatch(filterContact(e.target.value));\n  }; \n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm/>        \n      <h2>Contacts</h2>\n      <Filter filter={filter} onChange={changeFilter} />\n      <ContactList contacts={ visibleContacts }/>      \n      <Toaster position=\"top-center\" />\n    </>\n  );\n}"],"names":["spin","keyframes","Spinner","CgSpinner","defaultProps","size","Form","styled","Field","Text","Input","Button","ContactForm","useCreateContactMutation","addNewContact","isLoading","contacts","useFetchContactsQuery","data","useState","name","setName","number","setNumber","onSubmit","e","preventDefault","normalizedName","toLowerCase","find","contact","toast","addContact","autoComplete","type","value","onChange","target","pattern","title","required","ContactItem","id","phone","useDeleteContactMutation","deleteContact","isDeleting","onClick","disabled","List","Item","ContactList","isFetching","length","map","Filter","filter","ContactsView","useSelector","getFilter","dispatch","useDispatch","visibleContacts","normalizedFilter","includes","getVisibleContacts","filterContact","position"],"sourceRoot":""}